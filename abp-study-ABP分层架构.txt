前言

为了减少复杂性和提高代码的可重用性，采用分层架构是一种被广泛接受的技术。
为了实现分层的体系结构，ABP遵循DDD（领域驱动设计）的原则，将分为四个层次：
1.展现层（Presentation）：提供一个用户界面，实现用户交互操作。
2.应用层（Application）：进行展现层与领域层之间的协调，协调业务对象来执行特定的应用程序的任务。它不包含业务逻辑。
3.领域层（Domain）：包括业务对象和业务规则，这是应用程序的核心层。
4.基础设施层（Infrastructure）：提供通用技术来支持更高的层。例如基础设施层的仓储(Repository)可通过ORM来实现数据库交互。
根据实际需要，可能会有额外添加的层。例如：
5.分布式服务层（Distributed Service）：用于公开应用程序接口供远程客户端调用。比如通过ASP.NET Web API和WCF来实现。
这些都是常见的以领域为中心的分层体系结构。不同的项目在实现上可能会有细微的差别。

领域层（Domain）

领域层就是业务层，是一个项目的核心，所有业务规则都应该在领域层实现。

实体（Entity）
　　实体代表业务领域的数据和操作，在实践中，通过用来映射成数据库表。

仓储（Repository）
　　仓储用来操作数据库进行数据存取。仓储接口在领域层定义，而仓储的实现类应该写在基础设施层。

领域服务（Domain service）
　　当处理的业务规则跨越两个（及以上）实体时，应该写在领域服务方法里面。

领域事件（Domain Event）
　　在领域层某些特定情况发生时可以触发领域事件，并且在相应地方捕获并处理它们。

工作单元（Unit of Work）
　　工作单元是一种设计模式，用于维护一个由已经被修改(如增加、删除和更新等)的业务对象组成的列表。它负责协调这些业务对象的持久化工作及并发问题。

应用层（Application）

应用层提供一些应用服务（Application Services）方法供展现层调用。一个应用服务方法接收一个DTO(数据传输对象)作为输入参数，使用这个输入参数执行特定的领域层操作，并根据需要可返回另一个DTO。在展现层到领域层之间，不应该接收或返回实体(Entity)对象，应该进行DTO映射。一个应用服务方法通常被认为是一个工作单元（Unit of Work）。用户输入参数的验证工作也应该在应用层实现。ABP提供了一个基础架构让我们很容易地实现输入参数有效性验证。建议使用一种像AutoMapper这样的工具来进行实体与DTO之间的映射。

